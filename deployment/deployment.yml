apiVersion: apps/v1
kind: Deployment
metadata:
  name: laos-router
  labels:
    app.kubernetes.io/app: laos-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: laos-router
  template:
    metadata:
      labels:
        app.kubernetes.io/app: laos-router
    spec:
      containers:
        - name: laos-router
          image: freeverseio/laos-router
          resources:
            requests:
              memory: '128Mi'
              cpu: '128m'
            limits:
              memory: '512Mi'
              cpu: '1'
          imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: laos-router
  labels:
    app.kubernetes.io/app: laos-router
spec:
  ports:
    - port: 80 
      targetPort: 3000
  selector:
    app.kubernetes.io/app: laos-router

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: router-ingress
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/auth-tls-verify-client: 'on'
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: '1'
    nginx.ingress.kubernetes.io/auth-tls-error-page: 'http://www.mysite.com/error-cert.html'
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: 'true'
    cert-manager.io/cluster-issuer: letsencrypt-freeverse
    nginx.ingress.kubernetes.io/client-max-body-size: 6M
    nginx.ingress.kubernetes.io/proxy-body-size: 6M
spec:
  tls:
    - hosts:
        - https://edit-me.io # TODO decide if plaintext or env var
      secretName: router-tls
  rules:
    - host: https://edit-me.io # TODO decide if plaintext or env var
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: laos-router
                port:
                  number: 80
